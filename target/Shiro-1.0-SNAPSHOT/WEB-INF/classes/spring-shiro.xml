<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
	   default-lazy-init="true">

<description>Spring-Shiro Configuration</description>


	<!-- Define the realm you want to use to connect to your back-end security datasource: -->
	<bean id="myRealm" class="com.fzy.modules.utils.UserAuthorRealm"/>



	<!--<bean id="securityManager" class="org.apache.shiro.mgt.DefaultSecurityManager">-->
	<!--注：web项目需要使用DefaultWebSecurityManager-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="myRealm"/>
	</bean>


	<!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
	<!-- make the securityManager bean a static singleton. DO NOT do this in web -->
	<!-- applications - see the 'Web Applications' section below instead.-->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSercurityManager"/>
		<property name="arguments" ref="securityManager"/>
	</bean>


	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<!-- 没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，不输入地址的话会自动寻找项目web项目的根目录下的”/index.jsp”页面 -->
        <property name="loginUrl" value="/index.jsp"/>
		<!-- 登录成功默认跳转页面，不配置则跳转至”/”。如果登陆前点击的一个需要登录的页面，则在登录自动跳转到那个需要登录的页面。不跳转到此 -->
        <property name="successUrl" value="/"/>
		<!-- 没有权限默认跳转的页面 -->
        <property name="unauthorizedUrl" value="/index.jsp"/>

		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean --> <!-- defined will be automatically acquired and available via its beanName in chain --> <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
		<!--自定义认证拦截器-->
		<property name="filters">
			<util:map>
			<entry key="anAlias" value-ref="someFilter"/>
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<!--anon：不进行验证， authc:认证过， user:登录过-->
			<value>
				/${managerPath}/login/submitLogin = anon
				/${managerPath}/login/out = logout
				//${managerPath}/** = authc
			</value>
		</property>
	</bean>


	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context. --> <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available --> <!-- to the 'filterChainDefinitions' property. Or you can manully/explicitly add them -->
	<!-- to the shiroFilter's 'filter' Map if desired. See its JavaDoc for more details. -->
	<!--自定义认证拦截器-->
	<bean id="someFilter" class="com.fzy.modules.filter.SomeThingFilter"/>


	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true"/>
	</bean>



	<!--在独立应用程序和 Web 应用程序中，你可能想为安全检查使用 Shiro 的注释(例如，@RequiresRoles， @RequiresPermissions 等等)。-->
	<!--这需要 Shiro 的 Spring AOP 集成来扫 合适的注解类以及执行必要的安全逻辑。只需添加这两个 bean 定义到 applicationContext.xml 中-->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
		<property name="arguments" ref="securityManager"/>
	</bean>


	<!--当一个远程调用方法到达启用Shiro的服务器时，与该RPC调用关联的Subject在线程执行时必须绑定到访问的接收 线程。-->
	<!--这是通过在 applicationContext.xml 中定义 SecureRemotInvocationExecutor bean 来完成的:-->
	<!-- Secure Spring remoting: Ensure any Spring Remoting method invocations --> <!-- can be associated with a Subject for security checks. -->
	<!--<bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">-->
		<!--<property name="securityManager" ref="securityManager"/>-->
	<!--</bean>-->



	<!--当你定义这个 bean 之后，你必须将其插入到任何你正在用来 export/expose 你服务的远程 Exporter。-->
	<!--Exporter 实现 是根据使用的远程处理机制/协议来定义的。请参阅 Sping 的 Remoting 章节关于定义 Exporter bean 的内容。-->
	<!--例如，如果使用基于 HTTP 的远程调用(注意 secureRemoteInvocationExecutor bean 的相关属性)-->
	<!--<bean name="/someService" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">-->
		<!--<property name="service" ref="someService"/>-->
		<!--<property name="serviceInterface" value="com.pkg.service.SomeService"/>-->
		<!--<property name="remoteInvocationExecutor" ref="secureRemoteInvocationExecutor"/>-->
	<!--</bean>-->

	<!--当远程调用被执行后，Subject 的识别信息必须附加到远程调用的负载上使服务器知道是谁作出了该调用。-->
	<!--若客户端 是一个基于 Spring 的客户端，该关联是通过 Shiro 的 SecureRemoteInvocationFactory 来完成的:-->
	<!--<bean id="secureRemoteInvocationFactory" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationFactory"/>-->

	<!--在你定义好这个 bean 后，你需要将它插入到你正在使用的基于特定协议的 Spring remoting ProxyFactoryBean 中。 -->
	<!--例如，如果你正在使用基于 HTTP 的远程调用(注意上面定义的 secureRemoteInvocationFactory bean 的相关属性):-->
	<!--<bean id="someService" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">-->
		<!--<property name="serviceUrl" value="http://host:port/remoting/someService"/>-->
		<!--<property name="serviceInterface" value="com.pkg.service.SomeService"/>-->
		<!--<property name="remoteInvocationFactory" ref="secureRemoteInvocationFactory"/>-->
	<!--</bean>-->
</beans>