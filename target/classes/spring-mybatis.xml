<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd"
	   default-lazy-init="true">

<description>Spring-Mybatis Configuration</description>

	<!-- 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxWait" value="1000" />
	</bean>
	<!-- end -->

	<!-- MyBatis  配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据库连接池-->
		<property name="dataSource" ref="dataSource"/>
		<!--配置mybatis全局配置文件-->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
 		<!--扫描包entity包，使用别名,如：com.fzy.modules.shop.entity.Seckill 可以直接在mapping的resultType中放Seckill-->
		<property name="typeAliasesPackage" value="com.fzy.modules.entity"/>
		<!--扫描sql配置文件：mapper需要的xml文件-->
		<property name="mapperLocations" value="classpath:mappings/*.xml"/>

	</bean>


	<!--扫描dao接口，动态实现dao接口注入到spring容器-->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入sqlSessionFactory-->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!--给出需要扫描的dao接口包,实例化dao-->
		<property name="basePackage" value="com.fzy.modules.dao"/>
	</bean>

	<!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>